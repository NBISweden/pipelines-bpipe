#!/usr/bin/ruby
# == NAME
# bpipe_config.rb
#
# == USAGE
#  ./bpipe_config.rb [ -h | --help ]
#                    [ -p | --pipeline ] |[ -l | --list ] | [-c, --config ] | [-d, --describe ] | [-x, --verify] | [ -b, --bpipe-config ]
# == DESCRIPTION
# A simple tool to get information from  Bpipe pipelines developed by BILS
#
# == OPTIONS
#  -h,--help::			Show help
#  -p,--pipeline=PIPELINE::	Name of pipeline to configure
#  -l,--list			Get a list of all available pipelines
#  -c,--config			Generate a pipeline config file (requires -p, --pipeline)
#  -d,--describe		Describe the dependencies of a pipeline (requires -p, --pipeline)
#  -x,--verify			Verify the internal database and check for missing entries
#  -b,--bpipe-config		Generate a config file for a queuing system
#
# == EXPERT OPTIONS
#
# == AUTHOR
#   Marc Hoeppner, mphoeppner@gmail.com

require 'optparse'
require 'ostruct'
require 'logger'

require File.dirname(__FILE__) + '/lib/bpipe.rb'

include Bpipe

write_config = false
describe = false

bpipe = Bpipe::Pipeline.new

### Get the script arguments and open relevant files
options = OpenStruct.new()
opts = OptionParser.new()
opts.on("-h","--help","Display the usage information") {RDoc::usage}
opts.on("-l","--list","Listing all pipelines") {Bpipe::Pipeline.new.listall }
opts.on("-c","--config","sk for a fresh config file") {write_config=true }
opts.on("-p","--pipeline", "=PIPELINE","Name of a pipeline") {|argument| options.pipeline = argument }
opts.on("-d","--describe","Describe a pipeline") { describe=true }
opts.on("-x","--verify","Check the internal database") { Bpipe::Pipeline.new.db_verify }
opts.on("-b","--bpipe-config","Create a config file to a queuing system") { Bpipe::Pipeline.new.bpipe_config }

opts.parse! rescue RDoc::usage('usage')

bpipe = Bpipe::Pipeline.new

abort "No pipeline specified - use --list to get a list of installed pipelines" unless options.pipeline

pipeline_name=options.pipeline
if pipeline_name.end_with? ".bpipe"
	pipeline_name=pipeline_name.gsub(".bpipe", "")
end

my_pipeline = bpipe.pipelines.find{|p| p.name == pipeline_name}

abort "The pipeline you have specified does not exist (was: #{pipeline_name}). Use --list to get a list of installed pipelines" unless my_pipeline

if write_config
  puts "Writing a config file for this pipeline to pipeline.config.template"
  my_pipeline.write_config
end

if describe
  my_pipeline.describe
end
